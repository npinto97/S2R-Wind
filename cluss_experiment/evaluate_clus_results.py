import os
import re
import pandas as pd
import numpy as np

def extract_metrics_from_out(file_path):
    """
    Extracts RMSE, MAE, RSE, R^2 from the file .out generated by CLUS+
    """
    with open(file_path, "r") as f:
        content = f.read()

    rmse_match = re.search(r"Root mean squared error:\s+([0-9.]+)", content)
    mae_match = re.search(r"Mean absolute error:\s+([0-9.]+)", content)
    rse_match = re.search(r"Relative squared error:\s+([0-9.]+)", content)
    r2_match = re.search(r"R-squared:\s+([0-9.\-]+)", content)

    return {
        "rmse": float(rmse_match.group(1)) if rmse_match else np.nan,
        "mae": float(mae_match.group(1)) if mae_match else np.nan,
        "rse": float(rse_match.group(1)) if rse_match else np.nan,
        "r2": float(r2_match.group(1)) if r2_match else np.nan
    }

def parse_clus_out(file_path):
    """
    Parses the .out file to extract PercentageLabeled and Number of examples,
    then calculates n_labeled and n_unlabeled accordingly.
    """
    percentage_labeled = None
    n_train = None

    with open(file_path, "r") as f:
        for line in f:
            line = line.strip()
            if line.startswith("PercentageLabeled"):
                percentage_labeled = int(line.split('=')[1].strip())
            elif line.startswith("Number of examples"):
                parts = line.split(':')
                if len(parts) > 1:
                    n_train = int(parts[1].strip())
            if percentage_labeled is not None and n_train is not None:
                break

    if percentage_labeled is None or n_train is None:
        raise ValueError(f"Errore nel parsing del file {file_path}: dati mancanti.")

    n_labeled = int(n_train * percentage_labeled / 100)
    n_unlabeled = n_train - n_labeled

    return n_train, n_labeled, n_unlabeled

def load_clus_results(output_dir="./results/clus_ssl_outputs", output_csv_dir="./results/clus_folds", scales=[10, 20, 70], num_folds=1):
    os.makedirs(output_csv_dir, exist_ok=True)

    for scale in scales:
        for fold in range(num_folds):
            out_file = os.path.join(output_dir, f"fold{fold}_ssl_{scale}.out")
            if not os.path.exists(out_file):
                print(f"[!] File non trovato: {out_file}")
                continue

            metrics = extract_metrics_from_out(out_file)

            try:
                n_train, n_labeled, n_unlabeled = parse_clus_out(out_file)
            except ValueError as e:
                print(f"[!] Attenzione: {e}")
                n_train = n_labeled = n_unlabeled = np.nan

            # Per n_test puoi lasciarlo a NaN o estrarre se disponibile da altri dati
            n_test = np.nan

            row = {
                "rmse": metrics["rmse"],
                "mae": metrics["mae"],
                "rse": metrics["rse"],
                "r2": metrics["r2"],
                "n_train": n_train,
                "n_test": n_test,
                "n_labeled": n_labeled,
                "n_unlabeled": n_unlabeled,
                "scale": scale,
                "fold": fold,
                "Model": "CLUS+"
            }

            df = pd.DataFrame([row])

            output_path = os.path.join(output_csv_dir, f"fold{fold}_clus_{scale}.csv")
            df.to_csv(output_path, index=False)
            print(f"Salvato: {output_path}")

if __name__ == "__main__":
    load_clus_results()
